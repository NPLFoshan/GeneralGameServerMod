local function clone(from)
    local ret
    if type(from) == "table" then
        ret = {}
        for key, value in pairs(from) do
            ret[key] = clone(value)
        end
    else
        ret = from
    end
    return ret
end
local function new(class, parameters)
    local new_table = {}
    setmetatable(new_table, {__index = class})
    for key, value in pairs(class) do
        new_table[key] = clone(value)
    end
    if parameters and parameters.mInitMembers then
        for key, value in pairs(parameters.mInitMembers) do
            new_table[key] = value
        end
    end
    local list = {}
    local dst = new_table
    while dst do
        list[#list + 1] = dst
        dst = dst._super
    end
    for i = #list, 1, -1 do
        list[i].construction(new_table, parameters)
    end
    return new_table
end
local function delete(inst)
    if inst then
        local list = {}
        local dst = inst
        while dst do
            list[#list + 1] = dst
            dst = dst._super
        end
        for i = 1, #list do
            list[i].destruction(inst)
        end
    end
end

local Timer = {}
function Timer:construction()
    self.mInitTime = GetTime() * 0.001
    self.mTime = self.mInitTime
end

function Timer:destruction()
end

function Timer:delta()
    local new_time = GetTime() * 0.001
    local ret = new_time - self.mTime
    self.mTime = new_time
    return ret
end

function Timer:total()
    local new_time = GetTime() * 0.001
    local ret = new_time - self.mInitTime
    return ret
end

local RandomBlockIDs = {87,147,142,155,148,156,2216}
local Passes = 
{
    {{19219,213,19195},{19220,213,19195},{19221,213,19195},{19222,213,19195},{19223,213,19195},{19224,213,19195},{19225,213,19195},{19226,213,19195},{19227,213,19195},{19228,213,19195},{19228,213,19194},{19228,213,19193},{19228,213,19192},{19228,213,19191},{19228,213,19190},{19228,213,19189},{19228,213,19188},{19228,213,19187},{19228,213,19186},{19228,213,19185},{19228,213,19184},{19228,213,19183},{19228,213,19182},{19228,213,19181},{19228,213,19180},{19228,213,19179},{19228,213,19178},{19228,213,19177},{19228,213,19176},{19228,213,19175},{19228,213,19174},{19228,213,19173},{19228,213,19172},{19228,213,19171},{19228,213,19170},{19228,213,19169},{19228,213,19168},{19228,213,19167},{19228,213,19166},{19228,213,19165},{19228,213,19164},{19228,213,19163},{19228,213,19162},{19228,213,19161},{19228,213,19160},{19228,213,19159},{19228,213,19158},{19228,213,19157},{19228,213,19156},{19228,213,19155},{19228,213,19154},{19228,213,19153},{19228,213,19152},{19228,213,19151},{19228,213,19150},{19229,213,19150},{19230,213,19150},{19231,213,19150},{19232,213,19150},{19233,213,19150},{19234,213,19150},{19235,213,19150},{19236,213,19150},{19237,213,19150},{19238,213,19150},{19238,213,19151},{19238,215,19152},{19238,215,19153},{19237,216,19153},{19236,216,19153},{19235,217,19153},{19235,217,19152},{19235,218,19151},{19235,218,19150},{19236,219,19150},{19237,219,19150},{19238,220,19150},{19238,220,19151},{19238,221,19152},{19238,221,19153},{19237,222,19153},{19236,222,19153},{19235,223,19153},{19235,223,19152},{19235,224,19151},{19235,224,19150},{19236,225,19150},{19236,225,19150},{19238,226,19150},{19238,226,19151},{19238,227,19152},{19238,227,19153},{19237,228,19153},{19236,228,19153},{19235,229,19153},{19235,229,19152},{19235,230,19151},{19235,230,19150},{19236,231,19150},{19237,231,19150},{19238,232,19150},{19238,232,19151},{19238,233,19152},{19238,233,19153},{19237,234,19153},{19236,234,19153},{19235,235,19153},{19235,235,19152},{19235,236,19151},{19235,236,19150},{19236,237,19150},{19237,237,19150},{19238,238,19150},{19238,238,19151},{19238,239,19152},{19238,239,19153},{19237,240,19153},{19236,240,19153},{19235,241,19153},{19235,241,19152},{19235,242,19151},{19235,242,19150},{19236,243,19150},{19237,243,19150},{19238,244,19150},{19238,244,19151},{19238,245,19152},{19238,245,19153},{19237,246,19153},{19236,246,19153},{19235,247,19153},{19235,247,19152},{19235,248,19151},{19235,248,19150},{19236,249,19150},{19237,249,19150},{19238,249,19151},{19238,249,19152},{19238,249,19153}},
    {{19219,213,19196},{19220,213,19196},{19221,213,19196},{19222,213,19196},{19223,213,19196},{19224,213,19196},{19225,213,19196},{19226,213,19196},{19227,213,19196},{19228,213,19196},{19229,213,19196},{19229,213,19195},{19229,213,19194},{19229,213,19193},{19229,213,19192},{19229,213,19191},{19229,213,19190},{19229,213,19189},{19229,213,19188},{19229,213,19187},{19229,213,19186},{19229,213,19185},{19229,213,19184},{19229,213,19183},{19229,213,19182},{19229,213,19181},{19229,213,19180},{19229,213,19179},{19229,213,19178},{19229,213,19177},{19229,213,19176},{19229,213,19175},{19229,213,19174},{19229,213,19173},{19229,213,19172},{19229,213,19171},{19229,213,19170},{19229,213,19169},{19229,213,19168},{19229,213,19167},{19229,213,19166},{19229,213,19165},{19229,213,19164},{19229,213,19163},{19229,213,19162},{19229,213,19161},{19229,213,19160},{19229,213,19159},{19229,213,19158},{19229,213,19157},{19229,213,19156},{19229,213,19155},{19229,213,19154},{19229,213,19153},{19229,213,19152},{19229,213,19151},{19230,213,19151},{19231,213,19151},{19232,213,19151},{19233,213,19151},{19234,213,19151},{19235,213,19151},{19236,213,19151},{19237,213,19151},{19236,215,19152},{19236,217,19152},{19237,219,19151},{19237,221,19151},{19236,223,19152},{19237,225,19151},{19236,227,19152},{19236,229,19152},{19237,231,19151},{19237,233,19151},{19236,235,19152},{19236,237,19152},{19237,239,19151},{19237,241,19151},{19236,243,19152},{19237,245,19151},{19236,247,19152},{19236,249,19154},{19236,249,19155},{19236,249,19156},{19236,249,19157},{19236,249,19158},{19236,249,19159},{19236,249,19160},{19236,249,19161},{19236,249,19162}},
    {{19219,213,19197},{19220,213,19197},{19221,213,19197},{19222,213,19197},{19223,213,19197},{19224,213,19197},{19225,213,19197},{19226,213,19197},{19227,213,19197},{19228,213,19197},{19229,213,19197},{19230,213,19197},{19230,213,19196},{19230,213,19195},{19230,213,19194},{19230,213,19193},{19230,213,19192},{19230,213,19191},{19230,213,19190},{19230,213,19189},{19230,213,19188},{19230,213,19187},{19230,213,19186},{19230,213,19185},{19230,213,19184},{19230,213,19183},{19230,213,19182},{19230,213,19181},{19230,213,19180},{19230,213,19179},{19230,213,19178},{19230,213,19177},{19230,213,19176},{19230,213,19175},{19230,213,19174},{19230,213,19173},{19230,213,19172},{19230,213,19171},{19230,213,19170},{19230,213,19169},{19230,213,19168},{19230,213,19167},{19230,213,19166},{19230,213,19165},{19230,213,19164},{19230,213,19163},{19230,213,19162},{19230,213,19161},{19230,213,19160},{19230,213,19159},{19230,213,19158},{19230,213,19157},{19230,213,19156},{19230,213,19155},{19230,213,19154},{19230,213,19153},{19230,213,19152},{19231,213,19152},{19232,213,19152},{19233,213,19152},{19234,213,19152},{19235,213,19152},{19236,213,19152},{19237,213,19152},{19237,215,19152},{19236,217,19151},{19236,219,19151},{19237,221,19152},{19237,223,19152},{19237,225,19152},{19237,227,19152},{19236,229,19151},{19236,231,19151},{19237,233,19152},{19237,235,19152},{19236,237,19151},{19236,239,19151},{19237,241,19152},{19237,243,19152},{19237,245,19152},{19237,247,19152},{19237,249,19154},{19237,249,19155},{19237,249,19156},{19237,249,19157},{19237,249,19158},{19237,249,19159},{19237,249,19160},{19237,249,19161},{19237,249,19162}},
}
local Blocks = {}
local function _generateBlock()
    for i,pass in pairs(Passes) do
        if math.random() <= 0.3 then
            local point = pass[1]
            local block = {point[1],point[2],point[3],RandomBlockIDs[math.random(1,#RandomBlockIDs)],{i,1}}
            Blocks[#Blocks + 1] = block
            SetBlock(block[1],block[2],block[3],block[4])
            if math.random() <= 0.3 then
                local block = {point[1],point[2] + 1,point[3],RandomBlockIDs[math.random(1,#RandomBlockIDs)],{i + 3,1}}
                Blocks[#Blocks + 1] = block
                SetBlock(block[1],block[2],block[3],block[4])
            end
        end
    end
end

local function _moveBlock()
    for _,block in pairs(Blocks) do
        SetBlock(block[1],block[2],block[3],0)
    end
    for k,block in pairs(Blocks) do
        local pass_index = block[5][1]
        if pass_index > 3 then
            pass_index = pass_index - 3
        end
        if block[5][2] == #Passes[pass_index] then
            Blocks[k][5] = nil
        else
            Blocks[k][5][2] = block[5][2] + 1
        end
    end
    local index = 1
    while index <= #Blocks do
        if Blocks[index][5] then
            index = index + 1
        else
            table.remove(Blocks,index)
        end
    end
    for k,block in pairs(Blocks) do
        local pass_index = block[5][1]
        if pass_index > 3 then
            pass_index = pass_index - 3
        end
        local pass = Passes[pass_index]
        local point = pass[block[5][2]]
        Blocks[k][1] = point[1]
        Blocks[k][2] = point[2]
        if block[5][1] > 3 then
            Blocks[k][2] = Blocks[k][2] + 1
        end
        Blocks[k][3] = point[3]
        SetBlock(Blocks[k][1],Blocks[k][2],Blocks[k][3],block[4])
    end
end

BlockEffect = {}
function BlockEffect.update()
    BlockEffect.mTimer = BlockEffect.mTimer or new(Timer)
    if BlockEffect.mTimer:total() >= 0.5 then
        _moveBlock()
        _generateBlock()
        delete(BlockEffect.mTimer)
        BlockEffect.mTimer = nil
    end
end